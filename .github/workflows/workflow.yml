# .github/workflows/sync-project-fields.yml
# 目的:
# - 親プロジェクト -> 子プロジェクト へ一方向に Status / startDate / endDate を同期
# - 次のいずれかを満たすアイテムのみ同期対象にする:
#   1) Issue/PR に特定のラベルが付いている
#   2) 親プロジェクトの single-select フィールド「機能名」が特定の値のいずれかである
#
# 準備:
# - 親/子プロジェクトに同名のフィールドを作成: Status (Single-select), startDate (Date), endDate (Date)
# - 親/子の Status の選択肢名を一致させる
# - Org のシークレットに PAT を保存: ORG_PROJECTS_TOKEN (Projects: Read/Write)

name: Sync Projects (parent -> children) with filters

on:
  workflow_dispatch:
    inputs:
      auto_add:
        description: Add missing items to child projects if not present
        type: boolean
        default: false
  schedule:
    - cron: "*/15 * * * *"

permissions:
  contents: read

env:
  OWNER_LOGIN: iwashitahga                # 組織のログイン名に置き換え
  PARENT_PROJECT_NUMBER: "1"        # 親プロジェクト番号に置き換え
  CHILD_PROJECT_NUMBERS: "2"     # 子プロジェクト番号（カンマ区切り）に置き換え

  # 同期するフィールド名（親・子で同名にしておく）
  FIELD_STATUS: "Status"             # 単一選択フィールド
  FIELD_START: "Start date"           # 日付フィールド
  FIELD_END: "End date"               # 日付フィールド

  # フィルタ設定（いずれかを満たすアイテムのみ同期）
  FILTER_LABELS: "opg"     # ラベル名（カンマ区切り、空なら無効）
  FEATURE_FIELD_NAME: "機能名"       # 親プロジェクトに存在する single-select フィールド名
  FEATURE_VALUES: "五輪"        # 機能名フィールドの許容値（カンマ区切り、空なら無効）
  FILTER_MODE: "OR"                  # OR（どちらか一致）/ AND（両方一致）

  # ログ制御
  LOG_MODE: "all"               # off | filtered | matched | all
  LOG_LIMIT: "200"                   # ログ行数上限

  DUMP_GRAPHQL: "parent"     # off | parent | children | all
  DUMP_ITEMS_LIMIT: "20"     # 何件まで出すか
  DUMP_FIRST_RAW: "true"    # true で最初の 1 件を util.inspect 生出力

  GH_TOKEN: ${{ secrets.ORG_PROJECTS_TOKEN }}
  AUTO_ADD: ${{ github.event.inputs.auto_add }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Sync (with GraphQL items dump)
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const OWNER = process.env.OWNER_LOGIN;
            const PARENT_NUM = parseInt(process.env.PARENT_PROJECT_NUMBER, 10);
            const CHILD_NUMS = process.env.CHILD_PROJECT_NUMBERS.split(",").map(s=>parseInt(s.trim(),10));
            const FIELD_STATUS = process.env.FIELD_STATUS;
            const FIELD_START = process.env.FIELD_START;
            const FIELD_END = process.env.FIELD_END;

            const FILTER_LABELS = (process.env.FILTER_LABELS || "").split(",").map(s=>s.trim()).filter(Boolean);
            const FEATURE_FIELD_NAME = process.env.FEATURE_FIELD_NAME || "機能名";
            const FEATURE_VALUES = (process.env.FEATURE_VALUES || "").split(",").map(s=>s.trim()).filter(Boolean);
            const FILTER_MODE = (process.env.FILTER_MODE || "OR").toUpperCase();
            const AUTO_ADD = (process.env.AUTO_ADD || 'false') === 'true';

            const LOG_MODE = (process.env.LOG_MODE || "filtered").toLowerCase();
            const LOG_LIMIT = parseInt(process.env.LOG_LIMIT || "200", 10);

            const DUMP_GRAPHQL = (process.env.DUMP_GRAPHQL || "off").toLowerCase(); // off|parent|children|all
            const DUMP_ITEMS_LIMIT = parseInt(process.env.DUMP_ITEMS_LIMIT || "20", 10);
            const DUMP_FIRST_RAW = (process.env.DUMP_FIRST_RAW || "false").toLowerCase() === "true";

            const labelSet = new Set(FILTER_LABELS);
            const featureSet = new Set(FEATURE_VALUES);

            // GraphQL items をそのままに近い形でダンプ
            function dumpGraphQLItems(title, nodes, limit = 20) {
              const util = require('util');
              const total = nodes.length;
              const take = Math.min(limit, total);
              const trimmed = nodes.slice(0, take).map(n => ({
                id: n.id,
                content: n.content ? {
                  __typename: n.content.__typename,
                  number: n.content.number ?? null,
                  repository: n.content.repository?.nameWithOwner ?? null,
                  labels: (n.content.labels?.nodes || []).map(l => l.name).filter(Boolean)
                } : null,
                // fieldValues は必要箇所だけ整形
                fieldValues: (n.fieldValues?.nodes || []).map(fv => ({
                  __typename: fv.__typename,
                  field: {
                    // SingleSelect は id/name を ProjectV2SingleSelectField から取得
                    name: fv.field?.name ?? null,
                    id: fv.field?.id ?? null,
                    __typename: fv.field?.__typename ?? null
                  },
                  // SingleSelect の場合
                  optionId: fv.optionId ?? undefined,
                  name: fv.name ?? undefined,
                  // Date の場合
                  date: fv.date ?? undefined
                }))
              }));

              core.startGroup(`GraphQL items dump: ${title} (first ${take}/${total})`);
              core.info(JSON.stringify(trimmed, null, 2));
              if (DUMP_FIRST_RAW && total > 0) {
                core.info('--- first item raw (util.inspect) ---');
                core.info(util.inspect(nodes[0], { depth: 10, maxArrayLength: 200 }));
              }
              core.endGroup();
            }

            // repositoryOwner(login: ...) で User/Org どちらでも取得
            async function getProject(ownerLogin, number, { dump = false } = {}) {
              const q = `
              query($login:String!,$number:Int!,$after:String) {
                repositoryOwner(login:$login) {
                  __typename
                  ... on User {
                    projectV2(number:$number){
                      id title
                      fields(first:100){
                        nodes{
                          __typename
                          ... on ProjectV2FieldCommon { id name }
                          ... on ProjectV2SingleSelectField { id name options { id name } }
                        }
                      }
                      items(first:100, after:$after){
                        pageInfo{ hasNextPage endCursor }
                        nodes{
                          id
                          content{
                            __typename
                            ... on Issue {
                              id number
                              repository { nameWithOwner }
                              labels(first:100){ nodes{ name } }
                            }
                            ... on PullRequest {
                              id number
                              repository { nameWithOwner }
                              labels(first:100){ nodes{ name } }
                            }
                          }
                          fieldValues(first:50){
                            nodes{
                              __typename
                              ... on ProjectV2ItemFieldSingleSelectValue{
                                field{ __typename ... on ProjectV2SingleSelectField { id name } }
                                optionId
                                name
                              }
                              ... on ProjectV2ItemFieldDateValue{
                                field{ __typename ... on ProjectV2FieldCommon { id name } }
                                date
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  ... on Organization {
                    projectV2(number:$number){
                      id title
                      fields(first:100){
                        nodes{
                          __typename
                          ... on ProjectV2FieldCommon { id name }
                          ... on ProjectV2SingleSelectField { id name options { id name } }
                        }
                      }
                      items(first:100, after:$after){
                        pageInfo{ hasNextPage endCursor }
                        nodes{
                          id
                          content{
                            __typename
                            ... on Issue {
                              id number
                              repository { nameWithOwner }
                              labels(first:100){ nodes{ name } }
                            }
                            ... on PullRequest {
                              id number
                              repository { nameWithOwner }
                              labels(first:100){ nodes{ name } }
                            }
                          }
                          fieldValues(first:50){
                            nodes{
                              __typename
                              ... on ProjectV2ItemFieldSingleSelectValue{
                                field{ __typename ... on ProjectV2SingleSelectField { id name } }
                                optionId
                                name
                              }
                              ... on ProjectV2ItemFieldDateValue{
                                field{ __typename ... on ProjectV2FieldCommon { id name } }
                                date
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }`;

              let after = null;
              let project = null;
              let allNodes = [];
              let fields = [];

              do {
                const res = await github.graphql(q, { login: ownerLogin, number, after });
                const owner = res.repositoryOwner;
                if (!owner) throw new Error(`RepositoryOwner not found for login=${ownerLogin}`);
                project = owner.projectV2;
                if (!project) throw new Error(`ProjectV2 not found for ${ownerLogin} #${number}`);
                fields = project.fields.nodes;
                allNodes = allNodes.concat(project.items.nodes);
                after = project.items.pageInfo.hasNextPage ? project.items.pageInfo.endCursor : null;
              } while (after);

              if (dump) {
                dumpGraphQLItems(`${project.title}`, allNodes, DUMP_ITEMS_LIMIT);
              }

              // 紐づけ用のマップ生成
              const fieldByName = {};
              for (const f of fields) if (f?.name) fieldByName[f.name] = f;

              const itemByContentId = {};
              const valuesByContentId = {};
              const labelsByContentId = {};
              const rawFieldValuesByContentId = {};

              for (const it of allNodes) {
                if (!it.content) continue;
                const contentId = it.content.id;
                itemByContentId[contentId] = { itemId: it.id, content: it.content };

                labelsByContentId[contentId] = (it.content.labels?.nodes || []).map(n => n.name).filter(Boolean);

                const v = {};
                const raw = [];
                for (const fv of it.fieldValues.nodes || []) {
                  if (fv.__typename === 'ProjectV2ItemFieldSingleSelectValue') {
                    raw.push({
                      type: fv.__typename,
                      fieldId: fv.field?.id,
                      fieldName: fv.field?.name,
                      optionId: fv.optionId || null,
                      name: fv.name || null
                    });
                    if (fv.field?.name === FIELD_STATUS) {
                      v.statusName = fv.name || null;
                    }
                  } else if (fv.__typename === 'ProjectV2ItemFieldDateValue') {
                    raw.push({
                      type: fv.__typename,
                      fieldId: fv.field?.id,
                      fieldName: fv.field?.name,
                      date: fv.date || null
                    });
                    if (fv.field?.name === FIELD_START) v.startDate = fv.date || null;
                    if (fv.field?.name === FIELD_END) v.endDate = fv.date || null;
                  }
                }
                valuesByContentId[contentId] = v;
                rawFieldValuesByContentId[contentId] = raw;
              }

              return {
                id: project.id,
                title: project.title,
                fieldByName,
                itemByContentId,
                valuesByContentId,
                labelsByContentId,
                rawFieldValuesByContentId
              };
            }

            // ここからは「ダンプ」のみ要求にフォーカス
            core.info(`Owner=${OWNER} | Filter labels=[${FILTER_LABELS.join(", ")}], featureField="${FEATURE_FIELD_NAME}", featureValues=[${FEATURE_VALUES.join(", ")}], mode=${FILTER_MODE}`);
            const dumpParent = (DUMP_GRAPHQL === 'parent' || DUMP_GRAPHQL === 'all');
            const dumpChildren = (DUMP_GRAPHQL === 'children' || DUMP_GRAPHQL === 'all');

            // 親の items をダンプ
            const parent = await getProject(OWNER, PARENT_NUM, { dump: dumpParent });
            core.info(`Parent: ${parent.title}`);

            // 子の items もダンプ（必要なら）
            for (const childNum of CHILD_NUMS) {
              core.startGroup(`Inspect Child Project #${childNum}`);
              try {
                const child = await getProject(OWNER, childNum, { dump: dumpChildren });
                core.info(`Child: ${child.title}`);
              } finally {
                core.endGroup();
              }
            }

            // 取得とダンプのみを行う簡易版です。同期ロジックは意図的に実行しません。
            // 同期も行いたい場合は、ここから先に既存の同期処理（updateProjectV2ItemFieldValue 等）を差し戻してください。

